# Copyright 2020 Institute for Automation of Complex Power Systems,
# E.ON Energy Research Center, RWTH Aachen University
#
# This project is licensed under either of
# - Apache License, Version 2.0
# - MIT License
# at your option.
#
# Apache License, Version 2.0:
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# MIT License:
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

openapi: "3.0.0"
info:
  version: "1.0"
  title: Logger
  description: API of the logger for state saving and logging
servers:
  - url: localhost:30013
    description: This is for local test purpose, can be overwritten anyway.
  
paths:
  /api/alive:
    get:
      description: indicates if ams is alive
      responses:
        '200':
          description: OK - clonemap information
          content:
            text/plain:
              schema:
                type: string

  /api/logging/series/{masid}/{agentid}/names:
    parameters:
    - $ref: '#/components/parameters/masID'
    - $ref: '#/components/parameters/agentID'
    get:
      operationId: getLogSeriesNames
      description: get the names of the logSeries
      responses:
        '200':
          description: OK - log series names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  

  /api/logging/series/{masid}/{agentid}/{name}/time/{start}/{end}:
    parameters:
    - $ref: '#/components/parameters/masID'
    - $ref: '#/components/parameters/agentID'
    - $ref: '#/components/parameters/name'
    - name: start
      in: path
      description: start time of query
      required: true
      schema:
        type: string
    - name: end
      in: path
      description: end time of query
      required: true
      schema:
        type: string
    get:
      operationId: getLogSeriesInRange
      description: get logging messages within specified time range
      responses:
        '200':
          description: OK - logging messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogSeries'
  
  /api/logging/{masid}/{agentid}/{topic}/time/{start}/{end}:
    parameters:
    - $ref: '#/components/parameters/masID'
    - $ref: '#/components/parameters/agentID'
    - $ref: '#/components/parameters/topic'
    - name: start
      in: path
      description: start time of query
      required: true
      schema:
        type: string
    - name: end
      in: path
      description: end time of query
      required: true
      schema:
        type: string
    get:
      operationId: getLogsInRange
      description: get logging messages within specified time range
      responses:
        '200':
          description: OK - logging messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogMessage'

  /api/logging/stats/{masid}/{agentid}/{behtype}/{start}/{end}:
    parameters:
    - $ref: '#/components/parameters/masID'
    - $ref: '#/components/parameters/agentID'
    - $ref: '#/components/parameters/behtype'
    - name: start
      in: path
      description: start time of query
      required: true
      schema:
        type: string
    - name: end
      in: path
      description: end time of query
      required: true
      schema:
        type: string
    get:
      operationId: getStats
      description: get stats of the behaviors
      responses:
        '200':
          description: OK - logging messages
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/LogMessage'

  /logging/stats/{masid}/heatmap/{start}/{end}:
    parameters:
    - $ref: '#/components/parameters/masID'
    - name: start
      in: path
      description: start time of query
      required: true
      schema:
        type: string
    - name: end
      in: path
      description: end time of query
      required: true
      schema:
        type: string
    get:
      operationId: getMsgHeatmap
      description: get heatmap of the messages
      responses:
        '200':
          description: OK - heatmap of the messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

#   /api/logging/{mas-id}/{agent-id}/comm:
#     parameters:
#     - $ref: '#/components/parameters/masID'
#     - $ref: '#/components/parameters/agentID'
#     put:
#       description: update communication data
#       requestBody:
#         description: communication data
#         content:
#           applications/json:
#             schema:
#               type: array
#               items:
#                 $ref: '#/components/schemas/Communication'
#         required: true
#       responses:
#         '201':
#           description: Created
#     get:
#       description: get communication data
#       responses:
#         '200':
#           description: OK - communication
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Communication'

components:
  parameters:
    masID:
      name: masid
      in: path
      description: ID of MAS
      required: true
      schema:
        type: integer
    agentID:
      name: agentid
      in: path
      description: ID of agent
      required: true
      schema:
        type: integer
    topic:
      name: topic
      in: path
      description: type of logging
      required: true
      schema:
        type: string
        enum: 
          - error
          - debug
          - msg
          - status
          - app
    name:
      name: name
      in: path
      description: name of the log series
      required: true
      schema:
        type: string
    behtype:
      name: behtype
      in: path
      description: type of the behavior
      required: true
      schema:
        type: string


  schemas:
    LogMessage:
      description: information to be logged
      properties:
        masid: 
          description: ID of MAS
          type: integer
        agentid:
          description: ID of Agent
          type: integer
        topic:
          description: type of logging
          type: string
        timestamp:
          description: time at which message was generated
          type: string
        msg:
          description: message to be logged
          type: string
        data:
          description: additional data
          type: string
      required:
      - masid
      - agentid
      - topic
      - timestamp
      - msg
    LogSeries:
      description: series to be logged
      properties:
        masid: 
          description: ID of MAS
          type: integer
        agentid:
          description: ID of Agent
          type: integer
        name:
          description: name of the log series
          type: string
        timestamp:
          description: time at which message was generated
          type: string
        value:
          description: value of the log series
          type: number
      required:
      - masid
      - agentid
      - name
      - timestamp
      - value
    StatsInfo:
      properties:
        max: 
          description: max of the stats
          type: integer
        min: 
          description: min of the stats
          type: integer
        count: 
          description: count of the stats
          type: integer
        average: 
          description: average of the stat
          type: integer
        list:
          description: list for the behavior stats
          type: array
          items:
            $ref: '#/components/schemas/BehStats' 
    BehStats:
      properties:
        masid: 
          description: ID of MAS
          type: integer
        agentid:
          description: ID of Agent
          type: integer
        behtype:
          description: type of behavior
          type: string
        start:
          description: start time of the behavior
          type: string
        end:
          description: end time of the behavior
          type: string
        duration:
          description: duration of the behavior
          type: integer

    State:
      description: state of agent
      properties:
        masid:
          description: ID of MAS
          type: integer
        agentid:
          description: ID of agent
          type: integer
        timestamp:
          description: latest update time
          type: string
        state:
          description: state of agent
          type: string
      required:
      - masid
      - agentid
      - timestamp
      - state
    Communication:
      description: communication data
      properties:
        id:
          description: id of other agent
          type: integer
        numsent:
          description: number of messages sent to this agent
          type: integer
        numrecv:
          description: number of messages recived from this agent
          type: integer
      required:
      - id
      - numsent
      - numrecv